type: container

paths:
{{ range $i, $path := .paths }}
 - {{ $path }}
{{ end }}

exclude_files: [".gz$"]

multiline:
  type: pattern
  pattern: '^# Time: '
  negate: true
  match: after
  timeout: 3s

processors:
  - add_kubernetes_metadata:
    host: ${NODE_NAME}
    matchers:
      - logs_path:
          logs_path: "/var/log/containers/"
  - script:
      lang: javascript
      id: tidb_slow_log_parser
      params: {}
      source: >
        let params = {
            slowlog_plan_prefix: "tidb_decode_plan('",
            slowlog_plan_suffix: "')",
            kvRegex: new RegExp("(\S+): (\S+)"),
        };

        function register(scriptParams) {
            params = scriptParams;
        }

        function process(event) {
            // get the message
            var m0 = event.Get("message")
            event.Delete("message")
            if (m0 === null) {
                event.Cancel();
                return;
            }

            // split lines
            var lines = m0.match(/[^\r\n]+/g);
            if (lines.length < 3) {
                event.Cancel();
                return;
            }

            // extract k-v's
            for (var i = 0; i < lines.length - 1; i++) {
                // for each line in a slow log
                var match;
                while (match = params.kvRegex.exec(lines[i])) {
                    // for each k-v in a line
                    if (match.length !== 3) {
                        event.Cancel();
                        return;
                    }
                    var k = match[1]
                    var v = match[2]
                    if (k === "Txn_start_ts" || k === "Conn_ID") {
                        // no need to parse special keys
                        event.Put(k, v)
                        continue
                    }
                    // try to parse other fields to numbers
                    var num = parseFloat(v)
                    if (!isNaN(num)) {
                        event.Put(k, num)
                    } else {
                        event.Put(k, v)
                    }
                }
            }

            // add Query
            event.Put("Query", lines[lines.length - 1])

            return event
        }
